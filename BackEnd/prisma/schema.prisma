generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                 @id @default(autoincrement())
  nombre        String
  email         String              @unique
  password      String
  edad          Int
  tipo          TipoUsuario
  puntos        Int                 @default(0)
  cvs           CV[]
  postulaciones Postulacion[]
  recompensas   RecompensaUsuario[]
}

model Empresa {
  id          Int             @id @default(autoincrement())
  nombre      String
  email       String          @unique
  password    String
  descripcion String?
  desafios    Desafio[]
  ofertas     OfertaTrabajo[]
}

model CV {
  id        Int  @id @default(autoincrement())
  userId    Int
  contenido Json
  user      User @relation(fields: [userId], references: [id])

  @@index([userId], map: "CV_userId_fkey")
}

model OfertaTrabajo {
  id            Int           @id @default(autoincrement())
  empresaId     Int
  titulo        String
  descripcion   String
  requisitos    String?
  empresa       Empresa       @relation(fields: [empresaId], references: [id])
  postulaciones Postulacion[]

  @@index([empresaId], map: "OfertaTrabajo_empresaId_fkey")
}

model CursoExterno {
  id          Int    @id @default(autoincrement())
  titulo      String
  descripcion String
  url         String
  area        String
}

model Desafio {
  id          Int                 @id @default(autoincrement())
  empresaId   Int
  titulo      String
  descripcion String
  recompensa  String
  empresa     Empresa             @relation(fields: [empresaId], references: [id])
  recompensas RecompensaUsuario[]

  @@index([empresaId], map: "Desafio_empresaId_fkey")
}

model Postulacion {
  id       Int               @id @default(autoincrement())
  userId   Int
  ofertaId Int
  estado   EstadoPostulacion @default(PENDIENTE)
  oferta   OfertaTrabajo     @relation(fields: [ofertaId], references: [id])
  user     User              @relation(fields: [userId], references: [id])

  @@index([ofertaId], map: "Postulacion_ofertaId_fkey")
  @@index([userId], map: "Postulacion_userId_fkey")
}

model RecompensaUsuario {
  id             Int            @id @default(autoincrement())
  userId         Int
  desafioId      Int?
  tipoRecompensa TipoRecompensa
  cantidad       Int
  fecha          DateTime       @default(now())
  desafio        Desafio?       @relation(fields: [desafioId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  @@index([desafioId], map: "RecompensaUsuario_desafioId_fkey")
  @@index([userId], map: "RecompensaUsuario_userId_fkey")
}

enum TipoUsuario {
  ADOLESCENTE
  ADULTO
}

enum EstadoPostulacion {
  PENDIENTE
  ACEPTADA
  RECHAZADA
}

enum TipoRecompensa {
  PUNTOS
  EXPERIENCIA
  DINERO
}
