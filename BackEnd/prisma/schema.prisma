// ==================== NEXO (JobPath) - MVP ====================
// Red social profesional para jóvenes 14-25 años
// Schema MVP limpio y funcional

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==================== USUARIOS Y EMPRESAS ====================

/// Usuario - Joven o adolescente que usa la plataforma
/// Puede publicar, dar likes, comentar y postularse a ofertas (si es mayor de 18)
model Usuario {
  id              Int         @id @default(autoincrement())
  nombre          String
  email           String      @unique
  password        String // Hash bcrypt
  fechaNacimiento DateTime // Obligatorio para calcular edad y determinar tipo
  tipo            TipoUsuario // ADOLESCENTE (<18) o JOVEN (18-25)
  rol             RolUsuario  @default(USUARIO) // USUARIO o ADMIN

  // Perfil
  avatar    String?
  bio       String? @db.Text
  ubicacion String?
  puntos    Int     @default(0) // Sistema de gamificación

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  posts         Post[]
  likes         Like[]
  comentarios   Comentario[]
  postulaciones Postulacion[]
  cursosGuardados CursoGuardado[]
  desafiosParticipaciones DesafioParticipacion[]
  
  // Conexiones (seguir a otros usuarios)
  conexionesIniciadas Conexion[] @relation("UsuarioSigue")
  conexionesRecibidas Conexion[] @relation("UsuarioSeguido")

  // Empresas seguidas
  empresasSeguidas EmpresaSeguida[] @relation("UsuarioSigueEmpresa")

  @@index([email])
  @@map("usuarios")
}

/// Empresa - Organización que publica ofertas y contenido
model Empresa {
  id          Int     @id @default(autoincrement())
  nombre      String
  email       String  @unique
  password    String // Hash bcrypt
  descripcion String? @db.Text

  // Perfil
  logo      String?
  sector    String? // Ej: "Tecnología", "Marketing"
  ubicacion String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  posts   Post[]
  ofertas Oferta[]
  desafios Desafio[]
  
  // Seguidores (usuarios que siguen esta empresa)
  seguidores EmpresaSeguida[] @relation("EmpresaSeguidores")

  @@index([email])
  @@map("empresas")
}

// ==================== RED SOCIAL ====================

/// Post - Publicación de un usuario o empresa en el feed
/// Autor polimórfico: puede ser Usuario O Empresa
model Post {
  id        Int     @id @default(autoincrement())
  contenido String  @db.Text
  imagenUrl String? // URL de imagen opcional

  // Autor polimórfico (uno de los dos debe estar lleno)
  usuarioId Int?
  empresaId Int?
  usuario   Usuario? @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  empresa   Empresa? @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  // Relaciones
  likes       Like[]
  comentarios Comentario[]

  @@index([usuarioId])
  @@index([empresaId])
  @@index([createdAt])
  @@map("posts")
}

/// Like - Reacción "me gusta" a una publicación
/// Un usuario solo puede dar like una vez por post
model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  usuarioId Int
  createdAt DateTime @default(now())

  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([postId, usuarioId])
  @@index([postId])
  @@map("likes")
}

/// Comentario - Respuesta a una publicación
/// Soporta respuestas anidadas mediante parentId
model Comentario {
  id        Int      @id @default(autoincrement())
  postId    Int
  usuarioId Int
  contenido String   @db.Text
  parentId  Int? // NULL si es comentario raíz, sino ID del comentario padre
  createdAt DateTime @default(now())

  post       Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  usuario    Usuario      @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  parent     Comentario?  @relation("ComentarioRespuestas", fields: [parentId], references: [id], onDelete: Cascade)
  respuestas Comentario[] @relation("ComentarioRespuestas")

  @@index([postId])
  @@index([usuarioId])
  @@index([parentId])
  @@map("comentarios")
}

/// Conexion - Relación de seguimiento entre usuarios
/// Un usuario puede seguir a otro usuario (conexión unidireccional)
model Conexion {
  id            Int      @id @default(autoincrement())
  seguidorId    Int // Usuario que sigue
  seguidoId     Int // Usuario seguido
  createdAt     DateTime @default(now())

  seguidor Usuario @relation("UsuarioSigue", fields: [seguidorId], references: [id], onDelete: Cascade)
  seguido  Usuario @relation("UsuarioSeguido", fields: [seguidoId], references: [id], onDelete: Cascade)

  @@unique([seguidorId, seguidoId]) // Un usuario no puede seguir al mismo usuario dos veces
  @@index([seguidorId])
  @@index([seguidoId])
  @@map("conexiones")
}

/// EmpresaSeguida - Relación de seguimiento entre usuario y empresa
/// Un usuario puede seguir empresas para ver sus contenidos y ofertas
model EmpresaSeguida {
  id         Int      @id @default(autoincrement())
  usuarioId  Int // Usuario que sigue
  empresaId  Int // Empresa seguida
  createdAt  DateTime @default(now())

  usuario Usuario @relation("UsuarioSigueEmpresa", fields: [usuarioId], references: [id], onDelete: Cascade)
  empresa Empresa @relation("EmpresaSeguidores", fields: [empresaId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, empresaId]) // Un usuario no puede seguir a la misma empresa dos veces
  @@index([usuarioId])
  @@index([empresaId])
  @@map("empresas_seguidas")
}

// ==================== OFERTAS LABORALES ====================

/// Oferta - Trabajo publicado por una empresa
/// Solo usuarios mayores de 18 años (JOVEN) pueden postularse
model Oferta {
  id          Int    @id @default(autoincrement())
  empresaId   Int
  titulo      String
  descripcion String @db.Text

  // Detalles de la oferta
  ubicacion  String?
  salario    String?
  tipo       String? // Ej: "Tiempo completo", "Medio tiempo", "Trainee"
  area       String? // Ej: "tecnologia", "marketing", "ventas"
  modalidad  String? // Ej: "Presencial", "Remoto", "Híbrido"
  requisitos String? @db.Text // Requisitos del puesto

  // Estado y fechas
  activa           Boolean   @default(true)
  fechaVencimiento DateTime? // Fecha límite para postularse
  createdAt        DateTime  @default(now())

  // Relaciones
  empresa       Empresa       @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  postulaciones Postulacion[]

  @@index([empresaId])
  @@index([activa])
  @@index([area])
  @@map("ofertas")
}

/// Postulacion - Usuario aplica a una oferta laboral
/// Solo un usuario puede postularse una vez a cada oferta
model Postulacion {
  id        Int               @id @default(autoincrement())
  usuarioId Int
  ofertaId  Int
  estado    EstadoPostulacion @default(PENDIENTE)
  createdAt DateTime          @default(now())

  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  oferta  Oferta  @relation(fields: [ofertaId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, ofertaId])
  @@index([usuarioId])
  @@index([ofertaId])
  @@index([estado])
  @@map("postulaciones")
}

// ==================== DESAFÍOS ====================

/// Desafio - Reto publicado por empresa para que usuarios ganen puntos
/// Puede ser completado por usuarios adolescentes y jóvenes
model Desafio {
  id          Int     @id @default(autoincrement())
  empresaId   Int
  titulo      String
  descripcion String  @db.Text
  recompensa  Int // Puntos que gana el usuario al completar
  dificultad  String? // Ej: "Fácil", "Medio", "Difícil"
  categoria   String? // Ej: "Programación", "Diseño", "Marketing"
  activo      Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  participaciones DesafioParticipacion[]

  @@index([empresaId])
  @@index([activo])
  @@index([categoria])
  @@map("desafios")
}

/// DesafioParticipacion - Relación entre usuario y desafíos en los que participa
/// Permite a los usuarios guardar desafíos de interés y verlos en "Mis Desafíos"
model DesafioParticipacion {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  desafioId  Int
  estado     String   @default("EN_PROGRESO") // EN_PROGRESO, COMPLETADO, ABANDONADO
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  desafio Desafio @relation(fields: [desafioId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, desafioId]) // Un usuario no puede participar dos veces en el mismo desafío
  @@index([usuarioId])
  @@index([desafioId])
  @@map("desafios_participaciones")
}

// ==================== CURSOS ====================

/// CursoExterno - Curso externo recomendado (no alojado en la plataforma)
/// Recursos educativos para ayudar a jóvenes a desarrollarse
model CursoExterno {
  id          Int     @id @default(autoincrement())
  titulo      String
  descripcion String  @db.Text
  url         String // Link externo al curso
  proveedor   String? // Ej: "Coursera", "Udemy", "YouTube"
  duracion    String? // Ej: "4 semanas", "10 horas"
  nivel       String? // Ej: "Principiante", "Intermedio", "Avanzado"
  area        String? // Ej: "tecnologia", "marketing", "ventas"
  costo       String? // Ej: "Gratis", "$50 USD"
  activo      Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  cursosGuardados CursoGuardado[]

  @@index([area])
  @@index([activo])
  @@map("cursos_externos")
}

/// CursoGuardado - Relación entre usuario y cursos que ha guardado
/// Permite a los usuarios marcar cursos de interés y verlos en "Mis Cursos"
model CursoGuardado {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  cursoId   Int
  createdAt DateTime @default(now())

  // Relaciones
  usuario Usuario      @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  curso   CursoExterno @relation(fields: [cursoId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, cursoId]) // Un usuario no puede guardar el mismo curso dos veces
  @@index([usuarioId])
  @@index([cursoId])
  @@map("cursos_guardados")
}

// ==================== ENUMS ====================

/// TipoUsuario - Clasificación por edad
enum TipoUsuario {
  ADOLESCENTE // 14-17 años - No puede postularse a ofertas
  JOVEN // 18-25 años - Acceso completo
}

/// RolUsuario - Nivel de permisos en la plataforma
enum RolUsuario {
  USUARIO // Usuario estándar
  ADMIN // Administrador del sistema
}

/// EstadoPostulacion - Estado del proceso de postulación
enum EstadoPostulacion {
  PENDIENTE // En revisión por la empresa
  ACEPTADA // Usuario aceptado para el puesto
  RECHAZADA // Postulación rechazada
}
